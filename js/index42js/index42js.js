// // unnames function(անանուն ֆունկցիա) անուն չունեցող ֆունկցիա
// arrow function(սլաքով ֆունկցիա)-ն նախ և առաջ մեզ հնարաորություն է տալիս գրել կամ ստեղծել ֆունկցիա մի քիչ ավելի պարզ ձևով


// // 1 //
// // function func1(x) {
// //    alert(x)
// // }
// // func1(2)

// // 2 //
// const func21 = function(x) {
//     alert(x)
// }
// func21(3)
// // ինչպես կարելի սա թարգմանել arrow ֆունկցիայի function-ը delete ենք անում և փակագծերի աջ կողմից ավելացնում ենք սլաք 
// // այսպես
// // հիմա ստեղծեցինք arrow ֆունկցիա
// const func22 = (x) => {
//     alert(x)
// }
// func22(3)


// // ինքը մոտաորապես նույն ձևիա աշխատում ինչպես որ սովորական ֆունկցիան ինչ եմ ասում մոտաորապես որովհետև իրականում տարբերություններ կան 


// // func 3
// const obj1 = {
//     func31: function(x) {
//         alert(x)
//     }
// }
// obj1.func31(5)

// const obj2 = {
//     func32: (x) => {
//         alert(x)
//     }
// }
// obj2.func32(5)


// // func 4
// [5, 4, 3].forEach(function(val) {
//     alert(val)
// })

// [5, 4, 3].forEach((val) => {
//     alert(val)
// })
// // unnames function(անանուն ֆունկցիա) անուն չունեցող ֆունկցիա


// // arrow function(սլաքով ֆունկցիա)-ն նախ և առաջ մեզ հնարաորություն է տալիս գրել կամ ստեղծել ֆունկցիա մի քիչ ավելի պարզ ձևով





// ինչով է տարբերվում բացի տեսքից
// ամենակարևոր ու ամենամեծ տարբերությունը this-ը ինչպես է օգտագործվում

// // 1
// const func = function() {
//     alert(this)
// }
// func()

// // 2
// const obj = {
//     func: func
// }

// obj.func()


// // 3
// const func = () => {
//     alert(this)
// }
// func()






// 1
// const f1 = function(a, b) {
//     return a + b
// }

// alert(f1(4, 5))

// // 2
// const f2 = (a, b) => {
//     return a + b
// }

// alert(f2(4, 5))

// // եթե մեր ֆունկցիան ընդամենը ունի մեկ տող մեկ ինչ որ հայտարարություն հա մեկ ինչ որ գործողություն 
// // մենք կաող ենք անել
// // 3
// const f3 = (a, b) => a + b

// alert(f3(4, 5))




