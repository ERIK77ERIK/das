// let x = [7, 10, 22];

// let unshift = function(arr, value) {
//     let w = []
//     arr.forEach(function(val, i) {
//     w[i + 1] = arr[i]  // val
//     })
//     w[0] = value
//     return w
// };

// alert(unshift(x, 9));

// let x = [7, 10, 22];

// let unshift = function(arr, value) {
//    return arr.reduce(function(aggr, val,i){
//         aggr[i + 1] = arr[i]  // val
//         aggr[0] = value
//         return aggr
//     }, [])
// };

// alert(unshift(x, 9));





// // // 1
// let x = [7, 10, 22,];
// let unshift = function(arr, val) {
//     let i = arr.length - 1;
//     while(i >= 0) {
//         arr[i + 1] = arr[i];
//         i--;  // i -= 1; // i = i - 1;
//     }
//     arr[0] = val;
//     return arr.length
// };

// alert(unshift(x, 99));

// alert(x);

// մենք ստեղծեցինք մի հատ ֆունկցիա որը վերցնումա զանգված և ինչ որ արժեք, և բոլոր արժեքները մեր տված զանգվածի բրդումա մի հատ դեպի աջ և ավելացնումա մեր տված արժեքը ամենասկզբից այսինքն 0 index-ում ( և վերադարձնումա մեր տված զանգվածի մեջի անդամների քանակը(ավելի ճիշտ արդեն փոխած զանգվածի վերջի անդամի index-ը + 1 ) )
// իրականում ես տիպի ֆունկցիա կա զանգվածին կցած



// // 2
// // հիմնականում երբ որ մենք ունենք ֆունկցիա որը մի բանա անում ասենք ավելացնումա  արժի նաև ունենալ մի հատ ֆունկցիա որը հակառակն է անում հանում է
// // այսինքն կա մի հատել ֆունկցիա որը կոչվումա shift որը ճիշտ հակառակն է անում

// // shift-ը ամենաառաջին արժեքը հանումա և մնացած բոլոր արժեքները բրդումա դեպի հետ, բրդումա դեպի ձախ 
// // այսինքն ինչ է ստացվում եթե ստեղ մեր զանգվածի երկարությունը 3 էր shift  անելուց հետո երկարությունը դարնումա 2 

// let x = [7, 10, 22];

// function shift (arr) {
//   let a = x[0]
//   x = arr.filter(function(val, i) {
//      return i !== 0
//   })
//   return a
// }

// // shift(x);
// // alert(x);  

// // // և նաև էս shift-ը երբ որ մենք կանչում ենք ինքը բացի նրանից որ հանում է առաջին արժեքը ինքը նաև վերադարձնում է այդ արժեքը 

// alert(x.shift()); 
// alert(x)        

// // կտպի 7 հետո 10, 22


// //  մենք ունենք երկու շատ հարմար ֆունկցիաներ որը հնարավորությունա տալիս զանգվածի սկզբից ավելացնել կամ հանել արժեքներ 
// // մենք կարող ենք ավելացնենք և հանենք արժեքներ սկզբից ուրեմն մենք պետքա որ համապատասխան ելի ֆունկցիաներ ունենանք որոնք հակառակն են անում ավելացնում և հանում են արժեքներ ամենավերջից և այո կան հենց այսդպիսի ֆունկցիաներ push և pop




// // 3
// // push ֆունկցիաին տալիս ենք զանգված ու ինչ որ արժեք և նա ավելացնում է այդ արժեքը զանգվածի ամենավերջից 
// // push նշանակումա հրել այսինքն մենք ունենք մեր զանգվածը և մենք հրում ենք ամենավերջից ինչ որ մի արժեք այսինքն մենք եթե

// let x = [7, 10, 22];

// function push (arr, value) {
//   arr[arr.length ] = value
// };

// push(x, 999);
// alert(x);

// // կտպի 7, 10, 22, 999


// // 4
// pop ֆունկցիաին տալիս ենք զանգված և նա ամենավերջին արժեքը հանումա
//  և նաև ինքը բացի նրանից որ հանում է վերջին արժեքը ինքը նաև վերադարձնում է այդ արժեքը (shift-ին բավականին նման ուղակի հակառակ կողմից)

// let x = [7, 10, 22];

// function pop(arr) {
//   let a = x[arr.length-1]
//   x = arr.filter(function(val, i) {
//       return i !== arr.length-1
//   })
//   return a
// }
// alert(pop(x));
// alert(x);

// // կտպի 22 հետո 7, 10
// // ուրեմն մենք ստանում ենք 22 են ինչ որ pop եղավ են ինչ որ դուս եկավ մեր զանգվածից և 7, 10  ինչ որ մնաց քանի որ մենք 22-ը հանեցինք 


// ուրեմն մենք ունենք չորս հատ ֆունկցիա 
// 1. unshift որը ավելացնումա 
// 2. shift որը հանում է ձախ կողմից 
// 3. push որը ավելացնում է 
// 4. pop որը որ հանում է աջ կողմից 

// և էտ ամենը ուրեմն կա արդեն կցած զանգվածի վրա  և մենք կարող ենք նրանց օգտագործենք 




// // 5
// պատկերացրեք մենք ունենք երկու հատ զանգված և ուզում ենք ետ զանգվածներին կպցնենք իրար
// այսինքն ստանանք մի հատ մեծ զանգված որի մեջ կլինի այդ երկու զանգվածների բոլոր արժեքները

// let x = [7, 10, 22];
// let y = [88, 23, 19];

// let concat = function(a, b) {
//     let result = [];
//     a.forEach(function(val) {
//         result.push(val)
//     });
//     b.forEach(function(val) {
//         result.push(val)
//     })
//     return result
// };

// alert(concat(x, y))

// // // պարզվումա մի հատ concat կա ուրեմն զանգվածից արդեն կցած, նենց որ մենք կարող ենք անենք 
// alert(x.concat(y));



// // ինքը ոչ թե ավելացնումա x-ին օրինակ push-ը հենց եղած զանգվածին փոխումա ավելացնումա ետ իր զանգվածի մեջ 
// // concat-ը դա չի անում concat-ը ստեղծումա մի հատ նոր զանգված որի մեջ լինում են բոլոր արժեքները ուրեմն արաջի զանգվածից և ուրեմն տրված զանգվածից և նոր վերադարձնումա այդ նոր զանգվածը, ինքը ոչ մի եղած զանգված չի փոխում

// // ուշադրություն դարձրեք այս դետալին  կան ֆունկցիաներ որոնք որ փոխում են եղած արժեքները ու կան ֆունկցիաներ որոնք որ վերադարձնում են նոր արժեք 
// // օրինակ map-ը որը որ վերադարձնում է նոր զանգված եղած զանգվածը չի փոխում, filter-ը չի փոխում, reduce-ը չի փոխում իհարկե forEach-ը դե ոչ մի բան չի փոխում և այլն և այլն

// // push pop-ը shift-ն ու unshift-ը օրինակ կոնկրետ փոխում են եղած զանգվածը նենց որ զգույշ եղեք և գիտակցեք դրանց տարբերությունը

// եթե դրանից հետո alert անենք x-ն ու y-ը կտեսնենք որ նրանց արժեքները չեն փոխվել

// let x = [7, 10, 22];
// let y = [88, 23, 19];

// alert(x.concat(y));
// alert(x);
// alert(y);


// // 6
// // դե պատկերացրեք մենք ուզում ենք գտնենք index-ը ինչ որ մի արժեքի
// // դե պատկերացրեք մենք ունենք ինչ որ մի զանգված որի մեջ կա ինչ որ լիքը խառը արժեքներ և մենք ուզում ենք գրենք մի հատ ֆունկցիա որը կվերցնի ինչ որ զանգված, ցանկացած զանգված և կվերադարձնի index-ը տրված արժեքի 

// findIndex ֆունկցիաին տալիս ենք զանգված ու ֆունկցիա և մեր տված ֆունկցիան <br>
// աշխատելով այնքան անգամ որքան մեր տված զանգվածի մեջ եղած անդամների քանակն է և ամեն անգամ ստանալով մեր տված զանգվածի անդամները հերթականությամբ 
// այն արժեքը որի ժամանակ աշխատացնելուց findIndex ֆունկցիային տված ֆունկցիան վերադարձնի true, findIndex ֆունկցիան մեզ կվերադարձնի այդ արժեքի index-ը


// let x = [7, 10, 22, 55, 100, 3, 10];

// let findIndex = function(arr, fun) {
//    let i = 0;
//    while(i < arr.length) {
//     if(fun(arr[i])) {
//         return i;
//     }
//     i++;
//    }
//    return -1
// };

// alert(x.findIndex(function(val) {
//     return val === 10
// }))

// կտպի 1

// իսկ եթե ոչ մի արժեքի աշխատելու ժամանակ չվերադարձնի true, findIndex ֆունկցիան մեզ կվերադարձնի -1, -1 որպես նշան է, մեզ հասկանալու համար երբ որ մենք տեսնում ենք -1 ապա index չկա
// եթե արժեքը կրկնվի երկու անգամ ինքը ընդամենը կվերադարձնի առաջի գտնված index-ը, առաջի 10-ը գտնվում է 1 index-ի մեջ հետևաբար մենք կստանանք 1


// // 7
// // find ֆունկցիաին տալիս ենք զանգված ու ֆունկցիա և մեր տված ֆունկցիան <br>
// աշխատելով այնքան անգամ որքան մեր տված զանգվածի մեջ եղած անդամների քանակն է և ամեն անգամ ստանալով մեր տված զանգվածի անդամները հերթականությամբ 
// այն արժեքը որի ժամանակ աշխատացնելուց findIndex ֆունկցիային տված ֆունկցիան կվերադարձնի true , findIndex ֆունկցիան մեզ կվերադարձնի այդ արժեքը 


// let x = [7, 10, 22, 55, 100, 3, 10];

// let find = function(arr, fun) {
//    let i = arr.findIndex(fun);
//    if(i !== -1) {
//     return arr[i]
//    }
//    return undefined
// };

// alert(find(x, function(val) {
//     return val > 50;
// }));



// // // 
// let x = [7, 10, 22, 55, 100, 3, 6];

// alert(x.findIndex(function(val) {
//   return val > 50;
// }))

// alert(x.find(function(val) {
//   return val > 50;
// }))

// // կտպի 3 հետո 55

// // javascript array api