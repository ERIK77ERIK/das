// 1.
// let i = 0;
// while(i < 10) {
//     i++ // i = i + 1
// }


// for(let x = 0; x < 10; x++) {
// }


// let y = 0;
// do {
//     y++;
// } while(y < 10)



// 2.
// function f1() {
//     return f2();
// };
// function f2() {
//     return 1;
// }
// alert(f1());
// // կտպի 1


// function f1() {
//     return f2();
// };
// function f2() {
//     return f1();
// }
// // եկեք ուսումնասիրենք էս կոդը եթե մենք f1-ին կանչենք f1-ը իր մարմնի մեջ իր կոդային բլոկի մեջ կկանչի f2-ը, f2-ը իրա բլոկի մեջ կկանչի f1-ին որը հետո կկանչի f2-ին, որը կկանչի f1-ին այսինքն ցիկլա ստեղծվել իսկ կոնկրետ էս օրինակում սա անվերջական ցիկլ է, սա infinity loop կստեղծի


// // հիմա նույնպես ինչպես որ մենք կարող ենք f1-ից կանչենք f2, հետո f2-ից f1 պարզվումա որ միանգամից f1-ից կարողենք կանչենք f1 
// function f1() {
//     return f1();
// };


// // f1-ը պատկերացրեք ասենք թե անումա alert("hi") և ինչա ստացվում որ մենք ունենք ցիկլ անվերջական ցիկլ որը անընդհատ մեզ կտա "hi" "hi" "hi".... download-ներ
// function f1() {
//     alert("hi")
//     return f1();
// };



// 3.
// եկեք վերհիշենք while-ի ստրուկտուրան
// let i = 0;
// while(i < 10) {
//  i++;
// }


// function f1(i) {
//     if(i <= 0) {
//         return;
//     }
//     alert("hi");
//     return f1(i);
// };
// f1(5)
// // եթե f1-ին պաս տանք i սա infinity loop(անվերջական loop) կլինի ինչու որովհետև միշտ i-ը 5 կլինի, հետևաբար անվերջական loop կլինի


// // այսինքն որպեսզի սա ինչ որ մի պահ դառնա true ու մենք դուրս գանք իրանից մեր 5-ը պետքա քչանա քիչ-քիչ նենց որ մենք ստեղ կարող ենք անենք i-1
// function f1(i) {
//     if(i <= 0) {
//         return;
//     }
//     alert("hi");
//     return f1(i-1);
// };
// f1(5)



// այսինքն ինչ է ստացվում որ մենք ֆունկցիաով ստեղծեցինք ցիկլ 
// այսինքն էս բլոկը աշխատում է, էս բլոկի մեջ մենք ունենք ինչ որ մի if որը որոշում է երբ է ավարտվում մեր ցիկլը և ունենք են մասը կոդի որը կանչվում է նորեն էտ կոդը այսինքն հաջորդ անգամ որպեսզի էտ բլոկը աշխատի
// ուշադրություն դարձնենք որ ստեղ կա երկու կարևոր դետալ կա մի մասը ֆունկցիայի որը որոշումա երբ պետքա կանգնացնել և մի մասը ֆունկցիայի որը որոշում է թե ինչպես պետքա շարունակել ինչպես պետքա հաջորդ ցիկլը անել հաջորդ բլոկը աշխատացնել

// էս մոտեցումը loop-երի(ցիկլների) կոչվումա recursion ուղակի պետք է հասկանալ որ սա էդքան բարդ բան չի, ընդամենը կանչում ենք մի հատ ֆունկցիա որը հետո ինքն իրեն կանչումա նորից և նորից մինչև ինչ որ մի իրավիճակ է ստեղծվում որ ինքը այլևս չի կանչում և դա ավարտում է մեր ցիկլը 



// 4. հիմա եկեք օգտագործենք այս մոտեցումը որպեսզի լուծենք մի հատ խնդիր
// եկեք գրենք factorial ֆունկցիա, factorial ֆունկցիայի նպատակը նա է որ ինքը կվերցնի մի հատ թիվ և կվերադարձնի բոլոր բազմապատկումները էտ թվի մինչև մեկ 
// այսինքն եթե տանք 5 ինքը կանի կվերադարձնի 5*4*3*2*1

function factorial(num) {
if(num <= 1) {
    return 1;
}
    return num * factorial(num-1);
}
alert(factorial(5));


// // factorial(5) === 5 * factorial(4)
// //                    4 * factorial(3)
// //                      3 * factorial(2)
// //                        2 * factorial(1)
// //                                  1
// կառաջարկեմ եթե սա միքիչ այդդքան էլ պարզ չի որ debugerr-ով ընդամենը մեջով քայլեք հիշեք որ անպայման պետք է են ներքևի կոճակը սխմեք են որ դեպի ներքև է հղում որպեսզի մտնեք ֆունկցիայի մեջ


// ահա ձեզ factorial ֆունկցիան օգտագործելով recursion մոտեցումը որը շատ կարևոր է որ ունենա երկու կարևոր դետալ առաջինը ինչ որ մի մաս որը կորոշի երբ պետք է այս loop-ը ավարտվի թե չէ մենք կունենանք անվերջական ցիկլ և մեր երկրորդ մասը որը կորոշի recursion-ը ինչ ֆունկցիա է կանչում որպեսզի էտ loop-ը արվի
// այսինքն մենք ունենք մեր termination case-ը(դադարեցման գործ) և մեր recursive case-ը(ռեկուրսիվ գործ), termination case-ը դա են մասն է որ stop է տալիս recursive case-ը են մասն է որը շարունակում է հաջորդ քայլին հաջորդ բլոկային քայլին




// 5. recursion մոտեցումով ֆունկցիա որը վերցնում է զանգված և աշխատում է այնքան անգամ որքան զանգվածի մեջի անդամների քանակն է և կարող ենք ամեն պտույտի ժամանակ վերցնել ամեն անդամի index-ը
//
// այս դեպքում ֆունկցիան վերադարձնում է զանգվածի բոլոր անդամների գումարը
//
// let arr = [1, 2, 3, 4]
// function sum(arr) {
//    let result = 0;
//    function loop (i) {
//     if(i >= arr.length){
//         return;
//     }
//     result = result + arr[i]
//     loop(i + 1) 
//    }
//    loop(0)
//    return result
// }
// alert(sum(arr));


// function sum(arr) {
//     function loop(i) {
//         if(i >= arr.length) {
//             return 0;
//         }
//         return arr[i] + loop(i + 1)
//     }
//     return loop(0)
// }
// alert(sum([1, 2, 3, 4]));


// function sum(arr) {
//     function loop(i) {
//        if(i >= arr.length) {
//            return 0;
//        }
//        if(Array.isArray(arr[i])) {
//            return  sum(arr[i]) + loop(i + 1)
//        }
//         return arr[i] + loop(i + 1) 
//     }
//     return loop(0) 
// }
// alert(sum([4, 3, [8, 2], 3, 4 , [1, [2,3]]]))
// // 30
