// // 1

// let a = 5;
// let b = 6;

// alert(a + b);

// // ինչպես հիշում եք կոդը աշխատում է վերևից ներքև հետևաբար մենք չենք կարող օգտագործել փոփոխականը մինչև իրեն ստեղծելը
// // նույնը ֆունկցիաների դեպքում եթե մենք փորձենք մինչև իր ստեղծելը այսինքն իրենից վերև կանչել ֆունկցիան նա չի աշխատի

// a()

// let a = function() {
//     alert("hi");
// };
// // չի աշխատի


// // 2

b();

function b() {
    alert("hi");
};

// // javascript-ը երբ որ նոր է աշխատացնում ձեր կոդը միչև աշխատացնելը ինքը մի հատ scan-ա անում(կարդումա) վերևից ներքև և ինքը ման է գալիս ֆունկցիաներ որոնք որ այսենց են ստեղծված, այսինքն ոչ թե էն ֆունկցիաները որոնք որ վերագրված են ինչ որ փոփոխականի այլ էն ֆունկցիաները որոնք որ կոնկրետ ստեղծված են էս ձևով որտեղ որ գրված է function հետո իրա անունը և մնացածը
// // երբ որ նա տեսնում է այդ function-ները ինքը տակից կոդը միչև ձեր կոդը աշխատացնելը դա վերցնումա և քցումա վերև
// // այս պրոցեսը երբ որ javascript-ը ներքևից կոդը վերցնումա ու քցումա վերև կոչվումա hoisting(բարձրացում)

// // այս պրոցեսը որ ներքևի ֆունկցիաները լինեն վերևը տակիցա արվում դա արվումա են պահից երբ որ կոդը աշխատումա մենք դա չենք տեսնում 


// // ֆունկցիաները ստեղծելու այս երկու մոտեցումն էլ ճիշտ են և երկու տարբերակնել օգտագործում են ուղղակի էն ֆունկցիաները որոնք որ կոնկրետ ստեղծված են էս ձևով որտեղ որ գրված է function հետո իրա անունը և մնացածը ցանկացած տեղ թե իրա վերևը թե իրա ներքևը կարող եք օգտագործել ի տաբերություն էն ֆունկցիաների որոնք որ վերագրված են ինչ որ փոփոխականի որոնց որ կարելիյա օգտագործել իրանց հայտարարությունից ներքև




