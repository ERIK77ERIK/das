// մինչ այսօր մենք սովորել ենք տարբեր տիպի արժեքների մասին 
// մենք սովորել ենք թվերի, տեքստերի, բուլյան, undefined, null, NaN, ֆունկցիա, զանգվածների և object-ների մասին

// VALUE TYPES
// number
// string
// boolean
// undefined
// null
// NaN

// function
// array
// object

// իրականում բայց մի մասը էս արժեքների մի ձևա աշխատում և մի մասը մի քիչ ուրիշ և եկեք ուշադրություն դարձնենք էս տարբերություններին 

//1. նախ և առաջ եկեք ուշադրություն դարձնենք էս type-երին number string boolean undefined null և NaN-ի, էս տիպի արժեքները հիմնականում կոչվում են primitive types(primitive type-եր)

// PRIMITIVE TYPES
  // number
  // string
  // boolean
  // undefined
  // null
  // NaN

// ինչ նկատի ունենք primitive types բացատրեմ ինչպես են էս արժեքները աշխատում 
// ստեղ պատկերացրեք սա ոնցոր մեր հիշողություննա որտեղ որ գրանցվում են մեր փոփոխականները իրանց արժեքները և այլն
// ինչ է ստեղ լինում երբ որ մենք անում ենք սենց մի բան 

// let a = 5;
// let b = a;
// a = a + 1;
// alert(a);
// alert(b);
// կտպի 6 հետո 5

// ինչա սա նշանակում սա նշանակումա որ հիշողության մեջ ինչ որ մի տեղ նշվումա որ կա փոփոխական a անունով որի արժեքը 5 է, դա էս առաջին տողն է 
// հետո երկրորդ տողի ժամանակ ուրեմն ստեղծվում է փոփոխական b իսկ իր արժեքը ինչ է դե սենցա ստացվում նայեք երբ որ մենք վերագրում ենք b-ն a-ին, նենցա ստացվում որ էս 5-ը copy-ա արվում b-ի մեջ այսինքն b-ն ունենումա ինքն իր 5 արժեքը 
// սա կարեվոր է ինչու որովհետև հիմա եթե մենք անենք օրինակ a++ կամ անենք a = a + 1 ինչ է ստացվում էս տողում որ էս տողում ստեղծում ենք a որի մեջ դնում ենք 5 էս տողում մենք ստեղծում ենք b որի մեջ դնում ենք 5 էս տողում մենք a-ի արժեքը փոխում ենք մի հատ ավելացնելով այսինքն մենք 5-ին գումարում ենք 1 ստանում ենք 6 և դա վերագրում ենք a-ի մեջ հետևաբար a-ի արժեքը դառնում է 6 բայց ինչպես տեսնում եք b-ի արժեքը մնում է 5 ինչու որովհետև ինքը իր առանձին ոնցոր copy-ն ուներ 5-ի և էն փաստը որ մենք a-ի 5-ը փոխեցինք դարձրեցինք 6 b-ին ոչ մի բան չի փոխում b-ն շարունակումա ունենալ 5 եկեք հաստատենք եթե alert անենք ուրեմն a-ը և alert անենք b-ն ստացանք 6 և 5 ճիշտա 

// այսինքն ինչ է ստացվում որ երբ որ մենք աշխատում ենք primitive արժեքներով ամեն փոփոխականը ունենումա իր copy-ն էտ արժեքի 

// նույնը կլինի ստեղ եթե մենք աշխատենք տեքստերով

// let a = "hi";
// let b = a;
// a = "joe";
// alert(a);
// alert(b);
// կտպի joe հետո hi

// Variable    Value
// -----------------
// a           "joe"
// b           "hi"

// Address     Value
// -----------------


// ինչ կստացվի ստեղ առաջին տողում ստեղծվում է մի հատ փոփոխական a որին վերագրում ենք տեքստային "hi" էս տողում ստեղ մենք ստեղծում ենք b որին վերագրում ենք a-ի արժեքը բայց էլի քանի որ նա primitive type է արժեքը copy է արվում իր մեջ ինքը ունենումա իր առանձին copy-ին "hi"-ի հետո ստեղ երբ որ մենք փոխում ենք a-ը դարձնում ենք "joe" ընդամենը a-ի արժեքը դառնումա "joe" բայց b-ի արժեքը շարունակվում է լինել "hi" 
// եթե հիմա alert անենք կտեսնենք որ a-ը հիմա "joe" է b-ն շարունակվում է լինել "hi" 


// բոլոր primitivy typy-երով արժեքները աշխատում են այդպես այսինքն միշտ երբ որ մենք մի արժեքը վերագրում ենք ինչ որ մի փոփոխականի այդ փոփոխականը ունենումա local copy-ին էտ արժեքի նենց որ եթե էտ արժեքը ինչ որ մի ուրիշ տեղ փոխվումա դա իրան չի փոխում ինքը շարունակումա ունենալ էտ արժեքը 




// 2. կան նաև reference types

// REFERENCE TYPES
  // function
  // array
  // object

// այսպես ասած հղման տիպեր էտ ցանկի մեջ ընդգրկվում են ֆունկցիաները, զանգվածները և object-ները 
// իսկ նրանք ինչպես են աշխատում 

// let a = [5, 4, 2];
// let b = a;

// մենք առաջին տողում ստեղծում ենք մի հատ փոփոխական a որի մեջ որպես արժեք գրում ենք մի հատ հասցե ոչ թե զանգված այլ հասցե ասենք թե <0x01> ինչ որ խառը հասցե կարևոր չի 
// և էտ ինչա հասցեա դե իրականում առանձին էտ հասցեում ստեղծվում է զանգված սա գալիս է մտնում է ստեղ

// Variable    Value
// -----------------
// a           <0x01>
//
//
// Address     Value
// -----------------
// <0x01>      [5, 4, 2]

// այսինքն ինչ է ստացվում a-ը ոչ թե ունի հենց զանգվածը որպես արժեք այլ a-ը ունի հասցե որը հղում է դեպի մի ստեղծված զանգված հետևաբար երբ որ մենք այստեղ վերագրում ենք a-ը b-ի մեջ մենք վերագրում ենք a-ի հասցեն b-ի մեջ 
// այսինքն մենք ստեղ ստեղծում ենք մի հատ փոփոխական b որի մեջ մենք copy ենք անում էս արժեքը այսինքն ինչ է ստացվում քանի որ էս հասցեն և էս հասցեն նույն են իրանք երկուսնել հղում են դեպի նույն զանգվածը

// Variable    Value
// -----------------
// a           <0x01>
// b           <0x01>

// Address     Value
// -----------------
// <0x01>      [5, 4, 2]

// այսինքն եթե հիմա մենք անենք a.push(10); և alert անենք a և alert անենք b ինչ կստացվի

// let a = [5, 4, 2];
// let b = a;
// a.push(10);
// alert(a);
// alert(b);
// կտպի 5, 4, 2, 10 հետո 5, 4, 2, 10 

// Variable    Value
// -----------------
// a           <0x01>
// b           <0x01>

// Address     Value
// -----------------
// <0x01>      [5, 4, 2, 10]

// a-ը կունենա 5, 4, 2, 10  b-ն կունենա 5, 4, 2, 10 այսինքն ինչ է ստացվում որ ի տարբերություն primitivy արժեքներին որտեղ որ ամեն փոփոխականը ունենումա իր local copy-ին և եթե ասենք մենք ունենք երկու փոփոխական որի մեջ կա 5 և մի փոփոխականի 5-ը դարձնենք 6, մյուս փոփոխականը շարունակում է ունենալ 5 որովհետև ինքը իրա copy-ին ունի էտ թվի մեկը մյուսի հետ կապ չունի
// բայց երբ որ մենք աշխատում ենք հղված արժեքների(reference type-երի) հետ այսինքն ֆունկցիաների, զանգվածների և object-ների էտ ժամանակ երբ որ մենք իրենց փոխում ենք մենք իրականում փոխում ենք մի ընդհանուր արժեք ինչու որովհետև փոփոխակաները ունենում են ոչ թե հենց արժեքը այլ հղում դեպի արժեք 



// եկեք նույն օրինակը փորձենք object-ներով
// let a = {
//   name: "Joe"
// };
// let b = a;
// Variable    Value
// -----------------
// a           <0x01>
// b           <0x01>
//
// Address     Value
// -----------------
// <0x01>      {name: "Joe"}
// ինչ է ստացվում ստեղ
// ստեղծում ենք մի հատ փոփոխական որի մեջ լինում է ինչ որ մի արժեք ասենք թե <0x01> որը իսկ էտ արժեքը ինչ է դա հասցե է որը հղում է դեպի էս object-ը հետո հաջորդ տողում մենք copy ենք անում a-ից դեպի b իր արժեքը իսկ իր արժեքը ինչ է իր արժեքը հասցե է, նենց որ մենք ստեղծում ենք մի հատ b որի մեջ վերագրվում է հասցեն հետևաբար a-ն էլ և b-ն էլ հղում են դեպի նույն object-ին նենց որ եթե հիմա ես օրինակ անեմ 

// let a = {
//   name: "Joe"
// };
// let b = a;
// b.name = "Mike";
// alert(a.name);
// կտպի "Mike"
// Variable    Value
// -----------------
// a           <0x01>
// b           <0x01>
//
// Address     Value
// -----------------
// <0x01>      {name: "Mike"}

// ինչ կտա "Mike" ինչու էլի եմ ասում որովհետև b-ն էլ a-ն էլ ունեն նույն հասցեն նենց որ հետևաբար հղում են դեպի նույն object-ը նենց որ եթե մեկը էտ object-ը փոխի մյուսը էտ փոփոխությունը ստանում է քանի որ երկուսն էլ նայում են նույն object-ին 




// հիմա պատկերացրեք մենք ունենք մի հատ function
// function foo(arr) {
//    return arr.push(99);
// };
// let a = [5, 4, 23];
// foo(a);
// alert(a);
// կտպի [5, 4, 23, 99]

// ստեղ եթե alert անենք a ինչ կստացվի դե էս զանգվածը վերագրվածա a-ի մեջ չէ այսինքն մենք ունենք մի հատ a որի մեջ կա մի հասցե ինչ որ <0x01> ասենք թե որի արժեքը էս զանգվածն է ու ինչ է ստացվում երբ որ մենք փոխանցում ենք a-ը ստեղ ինքը գալիսա մտնումա ստեղ էս arr-ը իրա մեջ ունի հղում դեպի նույն հասցեն նենց որ երբ որ մենք ստեղ անում ենք arr.push(99) ստեղ ավելանում է 99 նենց որ երբ որ այս ֆունկցիան ավարտվում է և մենք ստեղ դուրս ենք գալիս և alert ենք անում a, a-ի մեջ ինչ կա դե a-ը էլի հղվածա նույն զանգվածին չէ նենց որ a-ը հիմա կունենա 4 հատ արժեք եկեք նայենք  խնդրեմ

// Variable    Value
// -----------------
// a           <0x01>
// arr         <0x01>
//
// Address     Value
// -----------------
// <0x01>      [5, 4, 23, 99]

// սա էս տիպի կանչ երբ որ մենք փոխանցում ենք մի արժեք որը հղված է օրինակ զանգվածի կամ ֆունկցիայի կամ object-ի դա կոչվում է pas by reference այսինքն հղումով պաս տալ կամ փոխանցել արժեքը ինչ որ ուրիշ ֆունկցիաին  երբ որ մենք primitivy արժեք ենք ուղարկում դա կոչվում է pas by value դա էտ ժամանակ ոչ թե հասցեն ենք ուղարկում կամ հղումը այլ հենց արժեքը 


// այսինքն ինչ է ստացվում եթե մենք ստեղ մի հատ ուրիշ ֆունկցիա ունենաինք function bar(a) որը վերցներ ինչ որ մի 

// function bar(b) {
//   return b++
// }
// let a = 1;
// bar(a);
// alert(a);
// կտպի 1

// a-ի արժեքը ինչ կլինի դե հիշեք որ 

// Variable    Value
// -----------------
// a           1
// b           2
// Address     Value
// -----------------

// ստեղ ինչ կլինի
// դե մենք ստեղծում ենք a անունով փոփոխական որի մեջ կա 1 հետո էս 1-ը գալիսա a-ի մեջ և գնումա ստեղ այսինքն b-ն հիմա իր մեջ ունենումա copy 1 ստեղ b++  այսինքն էս b-ի 1-ը դառնումա 2 բայց երբ որ մենք ավարտում ենք a-ի մեջ դեռ կա 1 էլի եմ ասում որովհետև primitive արժեքները copy-իա են արվում ամեն փոփոխականի մեջ ի տարբերություն զանգվածների, object-ների և ֆունկցիաների որոնք որ ունենում են հասցե այսինքն հղում
// նենց որ եթե ունեք երկու փոփոխական որոնք որ ունեն նույն հասցեն կամ նույն հղումը իրանք հղում են դեպի նույն object-ը, զանգվածը կամ ֆունկցիան



// ճիշտ հասկանալը տարբերությունը primitivy արժեքների և հղված արժեքների դա շատ կարևոր է և էս կոնցեպտը իրականում կիրառվում է և C++ -ում և JAVA-ում և տարբեր ուրիշ ծրագրաորման լեզուներում, նենց որ պետք է լավ հասկանանք սա և նաև լավ հասկանանք որպեսզի ապագայում սխալներ թույլ չտանք մեր կոդի մեջ 