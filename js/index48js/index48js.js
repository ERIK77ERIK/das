// 1 //
// // 1.1
// func11(5)

// function func11(x) {
//     alert(x)
// }

// func11(5)

// // 1.2
// const func12 = function(x) {
//     alert(x)
// }

// func12(5)



// 2 //
// const obj = {
//     func: function(x) {
//         alert(x)
//     }
// }

// obj.func(5)



// 3 //
// [5, 4, 3].forEach(function(val) {
//     alert(val)
// })

// այ էս ֆունկցիան 34 տողից հետո հասանելի չէ 
// էտ տիպի ֆունկցիաները կոչվում են unnames function(անանուն ֆունկցիա) այսինքն անուն չունեցող ֆունկցիա




// 4 //
// // 1 
// // ինչ է arrow ֆունկցիան 
// // arrow function-ը(սլաքով ֆունկցիան) նախ և առաջ մեզ հնարաորություն է տալիս գրել կամ ստեղծել ֆունկցիա մի քիչ ավելի պարզ ձևով

// const func21 = function(x) {
//     alert(x)
// }
// func21(3)

// // ինչպես կարելի սա թարգմանել arrow ֆունկցիայի function-ը delete ենք անում և փակագծերի աջ կողմից ավելացնում ենք սլաք 
// // այսպես
// // հիմա ստեղծեցինք arrow ֆունկցիա

// const func21 = (x) => {
//     alert(x)
// }
// func21(3)


// // ինքը մոտաորապես նույն ձևիա աշխատում ինչպես որ սովորական ֆունկցիան ինչ եմ ասում մոտաորապես որովհետև իրականում տարբերություններ կան 


// // 2
// // 2.1
// const obj1 = {
//     func31: function(x) {
//         alert(x)
//     }
// }
// obj1.func31(5)

//      ||
//      \/

// const obj2 = {
//     func32: (x) => {
//         alert(x)
//     }
// }
// obj2.func32(5)


// // 2.2
// [5, 4, 3].forEach(function(val) {
//     alert(val)
// })

//      ||
//      \/

// [5, 4, 3].forEach((val) => {
//     alert(val)
// })







// 5 //
// ինչով է տարբերվում բացի տեսքից
// ամենակարևոր ու ամենամեծ տարբերությունը this-ը ինչպես է օգտագործվում


// // 1
// const func = function() {
//     alert(this)
// }
// func()
// // կտպի [object Window]


// // 2
// const func = function() {
//     alert(this)
// }
// const obj = {
//     func: func
// }
// obj.func()
// // կտպի [object Object]


// // 3
// const func = () => {
//     alert(this)
// }
// func()
// // կտպի [object Window]


// // 4
// const func = () => {
//     alert(this)
// }
// const obj = {
//     func: func
// }
// obj.func()
// // կտպի [object Window]

// // ըստ են օրենքի դե գիտենք սովորական ֆունկցիան ինչպես է աշխատում այս ֆունկցիայի this-ը կընդունի կետի ձախ կողմի արժեքը ու ամեն ինչ կաշխատի տենց գիտենք 
// // բայց կտպի [object Window] ոչ թե են object-ը այլ window

// // երբ որ մենք ստեղծում ենք սովորական ֆունկցիա իրա this-ը որոշվում է են պահին երբ մենք իրեն կանչում ենք ու նայած ոնց ենք իրեն կանչում ինչ իրավիճակում և այլն էտ ժամանակ իրա this-ը որոշվում է էտ պահից
// // ի տարբերություն arrow ֆունկցիայի
// // arrow ֆունկցիան երբ որ մենք ստեղծում ենք երբ որ իրեն հայտարարում ենք հենց էտ պահին իրա this-ը որոշվում է
// // իսկ իրա this-ը ինչ է ինչպես է որոշվում դե նայած ինքը որ ֆունկցիայի մեջ է ստեղծվում ինքը էտ ֆունկցիայի this-ը ընդունում է որպես իրա this-ը 


/*
/* 
const obj = {
    name: "Joe",
    fun: function() {
        alert(this);
        [4, 5, 6].forEach((val) => {
            alert(this)
        })

    },
     func: () => {
        obj.fun
        alert(obj.fun() + "  " + this)
    }
}

obj.fun()
 */




// const obj2 = {
//     name: "JON",
//     func2: obj.func
// }
// obj2.func2()


// 1
// const f1 = function(a, b) {
//     return a + b
// }

// alert(f1(4, 5))

// // 2
// const f2 = (a, b) => {
//     return a + b
// }

// alert(f2(4, 5))

// // եթե մեր ֆունկցիան ընդամենը ունի մեկ տող մեկ ինչ որ հայտարարություն հա մեկ ինչ որ գործողություն 
// // մենք կաող ենք անել
// // 3
// const f3 = (a, b) => a + b

// alert(f3(4, 5))