// // // եկեք ստեղծենք մի ֆունկցիա որը վերցնում է մի զանգված, գումարում է իր անդամների արժեքները և վերադարձնում է արդյունքը

// // 1
// let sum = function(arr) {
//     let aggr = 0;
//     arr.forEach(function(val) {
//      aggr += val;
//     })
//     return aggr;
// };

// alert(sum([2, 4, 5, 10]));


// // 2

// // // կա reduce անունով ֆունկցիա,reduce նշանակումա քչացնել, միտքը նրանումա որ եթե մենք ունենք մի զանգված որտեղ որ կան բնականաբար տարբեր արժեքներ մենք փորձում ենք նրանցից ստանանք մեկ արժեք(reduce անենք այսինքն քչացնենք ու ստանանք ինչ որ մի արդյունք)
// // // reduce ֆունկցիան օգտագործում ենք երբ որ ուզում ենք մի զանգվածից ստանանք մի արդյունք

// // reduce ֆունկցիան վերցնում է երեք արժեք, մի զանգված, ֆունկցիա(որտեղ որ մենք կնկարագրենք մեր լոգիկան օրինակ էս պարագայում գումարումը) և երրորդը դա նախնական արժեքն է, ստեղ նախնական արժեքը 0-ն է 


// let a = [9, 3, 4, 10].reduce(function (aggr, val) {
//     return aggr + val
// }, 0);

// alert(a);


// /// /// Վաարժություն
function reduce(arr, fun, aggr) {
    arr.forEach(function(val, i) {
        if(i === 0 && aggr === undefined) {
            aggr = val;
        } else{
       aggr = fun(aggr, val, i);
        }
    })
    return aggr
}

alert(reduce([5, 9, 10], function(aggr, val, i) {
    return aggr + val
}));






// // 3
// // // // օրինակ
// let a = [
//     {
//         name: "Joe"
//     },
//     {
//         age: 43
//     },
//     {
//         phone: "89389839"
//     }
// ]

// let b = a.reduce(function(aggr, val) {
//     if(val.name !== undefined) {
//         aggr.name = val.name;
//     }
//     if(val.age !== undefined) {
//         aggr.age = val.age;
//     }
//     if(val.phone !== undefined) {
//         aggr.phone = val.phone;
//     }
//     return aggr
// }, {})

// alert(JSON.stringify(b,undefined, 2));



// // // 4 
// // reduce-ով map-ը
// let map = function(arr, fun) {
//     return arr.reduce(function(aggr, val, i) {
//         aggr[i] = fun(val);
//         return aggr
//     }, []);
// };

// alert(map([3, 8, 1, 0], function(val) {
//     return val * 2
// }));

// // // reduce-ը այնքան հզոր ֆունկցիայա որով մենք կարող ենք ստեղծենք և map-ը և filter-ը և forEach-ը այսինքն բոլոր էտ մնացած ֆունկցիաները կարող են շատ հեշտ ստեղծվեն reduce-ով



// // //5
// // // շատ կարևոր է երբ որ դուք կոդ եք գրում որ դուք ճիշտ հասկանաք խնդիրը որ դուք ուզում եք լուծեք

// // եթե ձեր խնդիրը եղած զանգվածը վերածել ինչ որ նոր զանգվածի ապա այդ ժամանակ դուք պետք է օգտագործեք map-ը
// // եթե դուք ունեք զանգված որը պետքա filter-ացնել այսինքն զանգվածից ինչ որ կոնկրետ արժեքներ վերցնել օգտագործեք filter ֆունկցիան
// // եթե դուք ունեք զանգված որի մեջ կան տարբեր արժեքներ բայց դուք ուզում եք ստանաք մի արժեք(թե դա object է թե դա ուրիշ զանգված է ․․․),եթե շատից ուզում եք քիչ ստանաք ապա այդ ժամանակ օգտագործում եք reduce
// // և մնացած բոլոր ուղակի ցիկլով անցնելու խնդիրները կարող ենք լուծենք forEach-ով

// // ճիշտ գործիքը պետքա օգտագործել ճիշտ իրավիճակի մեջ








